/**************************************************************************************************
*                                                                                                 *
* Author: Gianluca Frison, giaf (at) dtu.dk                                                       *
*                                                                                                 *
**************************************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <math.h>

/* ACADO auto-generated header */
#include "acado_common.h"
/* HPMPC configuration */
#ifdef __cplusplus	// All HPMPC functions have C linkage
extern "C" {
#endif
#include "hpmpc/include/target.h"
#include "hpmpc/include/block_size.h"
#include "hpmpc/include/aux_d.h"
#include "hpmpc/include/aux_s.h"
#include "hpmpc/include/mpc_solvers.h"
#include "c_interface.h"
#ifdef __cplusplus
}
#endif

// problem size (states, inputs, horizon)
#define NX ACADO_NX
#define NU ACADO_NU
#define N ACADO_N
#define NN ACADO_N


#define NZ (NX+NU+1)

// number of inequality constraints
#define NB (NU+NX)

// free initial state: 0 mpc, 1 mhe
#define FREE_X0 0

// ip method: 1 primal-dual, 2 predictor-corrector primal-dual
#define IP 2

// warm-start with user-provided solution (otherwise initialize x and u with 0 or something feasible)
#define WARM_START 0 //@WARM_START@
#define MU0 1e6

// single or double precision: 0 - double, 1 - single TODO
#define prec @PRECISION@

// number of iterations of IP method
#define K_MAX @MAX_ITER@

// tolerance in the duality measure
#define MU_TOL 1e-6

// minimum accepted step length
#define ALPHA_MIN 1e-8

/*// threshold in the duality measure to switch from single to double precision TODO not implemented */
/*#define SP_THR 1e5*/

// Debug flag TODO
#define PC_DEBUG @PRINT_LEVEL@

#if @PRECISION@ == 0

// double constants

#define MR D_MR
#define NCL D_NCL

#define NAL (MR*NCL)
#define PNZ (MR*((NZ+MR-1)/MR))
#define PNX (MR*((NX+MR-1)/MR))
#define CNZ (NCL*((NZ+NCL-1)/NCL))
#define CNX (NCL*((NX+NCL-1)/NCL))
#define PNB (MR*((NB+MR-1)/MR))
#define PAD ((NCL-NX%NCL)%NCL) // packing between BAbtL & P
#define CNL (CNZ<CNX+NCL ? CNX+NCL : CNZ)

#else

// float constants

#define MR S_MR
#define NCL S_NCL

#define NAL (MR*NCL)
#define PNZ (MR*((NZ+MR-1)/MR))
#define PNX (MR*((NX+MR-1)/MR))
#define CNZ (NCL*((NZ+NCL-1)/NCL))
#define CNX (NCL*((NX+NCL-1)/NCL))
#define PNB (MR*((NB+MR-1)/MR))
#define PAD ((NCL-NX%NCL)%NCL) // packing between BAbtL & P
#define CNL (CNZ<CNX+NCL ? CNX+NCL : CNZ)

#endif // @PRECISION@ == 0

#define nx NX 
#define nu NU 

#define bs MR 
#define ncl NCL 
#define nal (MR * NCL)

#define nz NZ 
#define pnz PNZ 
#define pnx PNX 
#define cnz CNZ 
#define cnx CNX 

#define pad PAD  // packing between BAbtL & P
#define cnl CNL 

#define nb NB  // number of box constraints
#define pnb PNB 

#ifdef __cplusplus
extern "C" {
#endif

/* version dealing with equality constraitns: is lb=ub, then fix the variable (corresponding column in A or B set to zero, and updated b) */
int acado_hpmpc_ip_wrapper( real_t* A, real_t* B, real_t* b,
                            real_t* Q, real_t* Qf, real_t* S, real_t* R, 
                            real_t* q, real_t* qf, real_t* r, 
                            real_t* lb, real_t* ub, 
                            real_t* qpA, real_t* lbA, real_t* ubA, 
                            real_t* x, real_t* u,
                            real_t* lambda, real_t* mu, real_t* slacks,
                            int* nIt )
                            
                           
{

    int hpmpc_status = -1;

    int k_max = K_MAX;                              // maximum number of iterations in the IP method
	double mu_tol = MU_TOL;                         // tolerance in the duality measure
	double alpha_min = ALPHA_MIN;                   // minimum accepted step length
	static real_t sigma_par[] = {0.4, 0.1, 0.001};  // control primal-dual IP behaviour
	static real_t stat[5*K_MAX];                    // statistics from the IP routine
	//static real_t work0[(@PRECISION@ == 0 ? 8 : 16) + (N+1)*(PNZ*CNX + PNZ*CNZ + PNZ*CNL + 5*PNZ + 3*PNX + 7*PNB) + 3*PNZ];
	int warm_start = WARM_START;
	int compute_mult = 0; // compute multipliers
    
    // TODO++: General constraints not supported yet!!
    double *C   = 0;
    double *D   = 0;
    double *CN  = 0;
    double *lgN  = 0;
    double *ugN  = 0;
   
	@QP_ND_ARRAY@
 
    int ngN     = 0;
    int ng      = nD[0]; // assuming same number of constraints on every stage	

	/* align work space */
	static double work[HPMPC_IP_MPC_DP_WORK_SPACE_TV];
  
    
    int i, j;
        

    real_t hpmpc_lb[(nx+nu)*(N+1)]; 
    real_t hpmpc_ub[(nx+nu)*(N+1)];
    real_t hpmpc_mu[(nx+nu)*(N+1)];
    
    // Sort bounds stage-wise
    for (i=0; i<N; i++)
    {
        for(j=0; j<nu; j++)
        {
            hpmpc_lb[i*(nx + nu) + j] = lb[nu*i + j];
            hpmpc_ub[i*(nx + nu) + j] = ub[nu*i + j];
        }

        for(j=nu; j<nu+nx; j++)
        {
            hpmpc_lb[i*(nx + nu) + j] = lb[ nu*(N-1) + nx*i + j ];
            hpmpc_ub[i*(nx + nu) + j] = ub[ nu*(N-1) + nx*i + j ];

        }
	}
    
	if(N>1) // adding bounds on the final stage
	{
		for(j=0; j<nu; j++)
    	{
			hpmpc_lb[N*(nx + nu) + j] = lb[nu*(N-1)  + j];  // "ghost" input bounds
			hpmpc_ub[N*(nx + nu) + j] = ub[nu*(N-1)  + j];  // "ghost" input bounds
    	}
			
		for(j=nu; j<nx+nu; j++)
    	{
            hpmpc_lb[N*(nx + nu) + j] = lb[nu*(N-1) + nx*(N-1)  + j ]; 
			hpmpc_ub[N*(nx + nu) + j] = ub[nu*(N-1) + nx*(N-1)  + j ]; 
    	}
	}
    
    //for(i=0; i< (nx + nu)*N*2; i++)
    //    hpmpc_mu[i] = mu[i];
    
    //for(i=0; i< nu; i++)
    //    hpmpc_mu[(nx + nu)*N*2 + i] = 0.0;                                       // lower "ghost" input bounds

    //for(i=0; i< nx; i++)
    //    hpmpc_mu[(nx + nu)*N*2 + nu + i] = mu[(nx + nu)*N*2 + i];                // lower state bounds

    //for(i=0; i< nu; i++)
    //    hpmpc_mu[(nx + nu)*N*2 + nu + nx + i] = 0.0;                             // upper "ghost" input bounds

    //for(i=0; i< nx; i++)
    //    hpmpc_mu[(nx + nu)*N*2 + 2*nu + nx + i] = mu[(nx + nu)*N*2 + nx + i];    // upper state bounds
       

    //break polytopic contraints into C and D (dl <=  Cx + Du <= du)
    
    real_t hpmpc_C[nx*ng*N];
    real_t hpmpc_D[nu*ng*N];
    
    for(i=0; i<N*ng; i++)
    {   
        for(j = 0; j<nx; j++)
        {
            hpmpc_C[ nx*i + j ] = qpA[i*(nx + nu) + j];
        }
        
        for(j = 0; j<nu; j++)
        {
            hpmpc_D[ nu*i + j] = qpA[i*(nx + nu) + nx + j]; 
        }
    }

	// call the IP solver
    int compute_res = 1;
    double inf_norm_res[4];
    hpmpc_status = c_order_ip_hard_mpc_tv(nIt, k_max, MU0, MU_TOL, 'd', N, nx, nu, nb, ng, ngN, 0, A, B, b, Q, Qf, S, R, q, qf, r, hpmpc_lb, hpmpc_ub, hpmpc_C, hpmpc_D, lbA, ubA, CN, lgN, ugN, x, u, work, stat, compute_res, inf_norm_res, compute_mult, mu, lambda, slacks);

    // Copy multipliers back to workspace (skipping "ghost" multipliers)
    //for(i=0; i< (nx + nu)*N*2; i++)
    //    mu[i] = hpmpc_mu[i];
    

    //for(i=0; i< nx; i++)
    //   mu[(nx + nu)*N*2 + i]  = hpmpc_mu[(nx + nu)*N*2 + nu + i];                // lower state bounds


    //for(i=0; i< nx; i++)
    //    mu[(nx + nu)*N*2 + nx + i] = hpmpc_mu[(nx + nu)*N*2 + 2*nu + nx + i];    // upper state bounds


#if PC_DEBUG == 1
	for (jj = 0; jj < *nIt; jj++)
		printf("k = %d\tsigma = %f\talpha = %f\tmu = %f\t\tmu = %e\talpha = %f\tmu = %f\t\tmu = %e\n", jj,
			   stat[5*jj+0], stat[5*jj+1], stat[5*jj+2], stat[5*jj+2], stat[5*jj+3], stat[5*jj+4], stat[5*jj+4]);
	printf("\n");
#endif /* PC_DEBUG == 1 */

//	if (*nIt == K_MAX)
//		return 1;

    return hpmpc_status;

}

#ifdef __cplusplus
}
#endif
